1. Parantezarea inmultirii matricelor: rezolvare de mana (calcule + completare triunghi, parantezare optima), implementare in C;
    exemplu: p0 = 2, p1 = 4,  p2 = 3; p3 = 5, p4 = 2 
    De calculat (A1 * A2 * A3 * A4).


A1,1; A2,2; A3,3 si A4,4 sunt 0 deoarece i = j, m[i, j] = 0 pentru i = j;

A1,2 = {A1 * A2} => m1,2 = min(m[1, 1] + m[2, 2] + p0 * p1 * p2) = 0 + 0 + 2 * 4 * 3 = 24;

A2,3 = {A2 * A3} => m2,3 = min(m[2, 2] + m[3, 3] + p1 * p2 * p3) = 0 + 0 + 4 * 3 * 5 = 60;

A3,4 = {A3 * A4} => m3,4 = min(m[3, 3] + m[4, 4] + p2 * p3 * p4) = 0 + 0 + 3 * 5 * 2 = 30;

A1,3 = {A1 * A2,3; A1,2 * A3} => m1,3 = min(m1,1 + m2,3 + p0 * p1 * p3; m1,2 + m3,3 + p0 * p2 * p3) = 
									  = min(0 + 60 + 2 * 4 * 5; 24 + 0 + 2 * 3 * 5) =
									  = min(100; 54) =
									  = 54;

s1,3 = 2


A2,4 = {A2 * A3,4; A2,3 * A4} => m2,4 = min(m2,2 + m3,4 + p1 * p2 * p4; m2,3 + m3,3 + p1 * p3 * p4) =
       								  = min(0 + 30 + 4 * 3 * 2; 60 + 0 + 4 * 5 * 2) = 
        							  = min(54; 100) = 
        							  = 54;

s2,4 = 2;


A1,4 = {A1 * A2,4; A1,2 * A3,4; A1,3 * A4} => m1,4 = min(m1,1 + m2,4 + p0 * p1 * p4; m1,2 + m3,4 + p0 * p2 * p4; m1,3 + m4,4 + p0 * p3 * p4) =
												   = min (0 + 54 + 2 * 4 * 2; 24 + 30 + 2 * 3 * 2; 54 + 0 + 2 * 5 * 2) =
												   = min (70; 66; 74) = 
        										   = 66;

s1,4 = 2;

Parantezarea optima pentru A1,4 este : A1,2 * A3,4 = (A1 * A2) * (A3 * A4) -> care are 66 de operatii (numar optim).

Triunghiul arata astfel:


										m[i,j]

			j			 4      1			i
					 3		66      2
				 2		54		54      3
			 1		24		60		30     4
				0		0		0		0
			 2		4		3		5		2

			 |	A1	|	A2	|	A3	|	A4  |

			 p0	    p1      p2      p3      p4



2. Problema discreta a rucsacului: rezolvare de mana, implementare C; exemplu: cel din cursul 2a

M = 50;
m = {10, 30, 20}
v = {60, 120, 100}

D[i][j] = max(D[i - 1][j], D[i - 1][j - m[i]] + v[i]);

D:

		j		0 ... 10 ... 20 ... 30 ... 40 ... 50

i 				0	  0		 0		0	   0      0

m1=10; v1=60	0	  60     60     60     60     60

m2=30; v1=120	0	  60     60     120    180    180

m1=20; v1=100	0	  60     100    160    180    220


Se vor initializa prima linie si prima coloana la 0;

i = 1 => vom avea de fiecare data D[i][j] = max(D[0][j], D[0][j - m[i]] + v[i]) = max(0, 60) = 60;

i = 2 =>
	j = 10 && j = 20 => m[2] (30) > 10 && m[2] (30) > 20 => preluam de la nivelul anterior => D[2][10] = 60, D[2][20] = 60;

	j = 30 => D[2][30] = max(D[1][30], D[1][0] + 120) = max(60, 120) = 120;

	j = 40 => D[2][40] = max(D[1][40], D[1][10] + 120) = max(60, 60 + 120) = max(60, 180) = 180;

	j = 50 => D[2][50] = max(D[1][50], D[1][20] + 120) = max(60, 60 + 120) = max(60, 180) = 180;

i = 3 =>
	j = 10 => m[3] (20) > 10 => preluam de la nivelul anterior => D[3][10] = 60;

	j = 20 => D[3][20] = max(D[2][20], D[2][0] + 100) = max(60, 100) = 100;

	j = 30 => D[3][30] = max(D[2][30], D[2][10] + 100) = max(120, 60 + 100) = max(120, 160) = 160;

	j = 40 => D[3][40] = max(D[2][40], D[2][20] + 100) = max(180, 60 + 100) = max(120, 200) = 180;

	j = 50 => D[3][50] = max(D[2][50], D[2][30] + 100) = max(180, 120 + 100) = max(120, 220) = 220;


=> Rezultatul este 220



3. Fiind dat un sir de numere naturale sa se gaseasca cel mai lung subsir crescator: rezolvare de mana, implementare in C
    exemplu : 1 2 9 3 8 4 7 => 1 2 3 4 7 (lungime = 5)

D[0] = 1;
maxval = 0; la fiecare incrementare a lui i el se va reseta si va fi 0;
maxval = max(maxval, D[j]);
D[i] = maxval + 1;

vec[1] (2) > vec[0] (1) => maxval = max(0, D[0]) = max(0, 1) = 1 => D[1] = 1 + 1 = 2;

vec[2] (9) > vec[0] (1) => maxval = max(0, D[0]) = max(0, 1) = 1;
vec[2] (9) > vec[1] (2) => maxval = max(1, D[1]) = max(1, 2) = 2 => D[2] = 2 + 1 = 3;

vec[3] (3) > vec[0] (1) => maxval = max(0, D[0]) = max(0, 1) = 1;
vec[3] (3) > vec[1] (2) => maxval = max(1, D[1]) = max(1, 2) = 2;
vec[3] (3) < vec[2] (9) => D[3] = 2 + 1 = 3;

vec[4] (8) > vec[0] (1) => maxval = max(0, D[0]) = max(0, 1) = 1;
vec[4] (8) > vec[1] (2) => maxval = max(1, D[1]) = max(1, 2) = 2;
vec[4] (8) < vec[2] (9)
vec[4] (8) > vec[3] (3) => maxval = max(2, D[3]) = max(2, 3) = 3 => D[4] = 3 + 1 = 4;

vec[5] (4) > vec[0] (1) => maxval = max(0, D[0]) = max(0, 1) = 1;
vec[5] (4) > vec[1] (2) => maxval = max(1, D[1]) = max(1, 2) = 2;
vec[5] (4) < vec[2] (9)
vec[5] (4) > vec[3] (3) => maxval = max(2, D[3]) = max(2, 3) = 3;
vec[5] (4) < vec[4] (8) => D[5] = 3 + 1 = 4;

vec[6] (7) > vec[0] (1) => maxval = max(0, D[0]) = max(0, 1) = 1;
vec[6] (7) > vec[1] (2) => maxval = max(1, D[1]) = max(1, 2) = 2;
vec[6] (7) < vec[2] (9)
vec[6] (7) > vec[3] (3) => maxval = max(2, D[3]) = max(2, 3) = 3;
vec[6] (7) < vec[4] (8)
vec[6] (7) > vec[5] (4) => maxval = max(3, D[5]) = max(3, 4) = 4 => D[6] = 4 + 1 = 5;

=> solutia problemei este 1 2 3 4 7 si are lungimea maxima de 5 elemente.




