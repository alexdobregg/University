package commands;import fileio.ActionInputData;import fileio.SerialInputData;import fileio.UserInputData;import java.util.ArrayList;import java.util.List;import java.util.Map;public final class Command {    private Command() {    }    /**     * A method to check if a movie/serial is in the favorites list of a user.     * If the answer is yes, an error message is returned, otherwise, the method checks     * if it was seen. If yes, it is being added in the favorites list and a success message     * is returned, otherwise an error message is returned.     * @param users the list of users     * @param action the action     * @return favorite command message     */    public static String getFavMessage(final List<UserInputData> users,                                       final ActionInputData action) {        String favMessage = null;        for (UserInputData user : users) {            if (user.getUsername().equals(action.getUsername())) {                if (user.getFavoriteMovies().contains(action.getTitle())) {                    favMessage = "error -> " + action.getTitle() + " is already in favourite list";                }                if (favMessage == null) {                    if (user.getHistory().containsKey(action.getTitle())) {                        favMessage = "success -> " + action.getTitle() + " was added as favourite";                        user.getFavoriteMovies().add(action.getTitle());                    } else {                        favMessage = "error -> " + action.getTitle() + " is not seen";                    }                }            }        }        return favMessage;    }    /**     * A method to check if a movie/serial has been seen by a user. If yes,     * the number o views for that movie/serial is being incremented, otherwise     * it is added in the user's history.     * @param users the list of users     * @param action the action     * @return view command message     */    public static String getViewMessage(final List<UserInputData> users,                                        final ActionInputData action) {        String viewMessage = null;        for (UserInputData user : users) {            if (user.getUsername().equals(action.getUsername())) {                if (user.getHistory().containsKey(action.getTitle())) {                    for (Map.Entry<String, Integer> entry : user.getHistory().entrySet()) {                        if (entry.getKey().equals(action.getTitle())) {                            entry.setValue(entry.getValue() + 1);                            viewMessage = "success -> " + entry.getKey()                                            + " was viewed with total views of "                                            + entry.getValue();                            break;                        }                    }                } else {                    user.getHistory().put(action.getTitle(), 1);                    viewMessage = "success -> " + action.getTitle()                                    + " was viewed with total views of 1";                }            }        }        return viewMessage;    }    /**     * A method to check if a movie has been rated by a user. If yes, an error     * message is returned, otherwise, the method checks if it has been seen. If yes,     * it receive the rating and a success message is returned, otherwise, an error one     * is returned.     * @param users the list of users     * @param action the action     * @return rating movie message     */    public static String getRatingMovMessage(final List<UserInputData> users,                                             final ActionInputData action) {        String ratingMovMessage = null;        for (UserInputData user : users) {            if (user.getUsername().equals(action.getUsername())) {                if (action.getSeasonNumber() == 0) {                    if (user.getHistory().containsKey(action.getTitle())) {                        if (!user.getMoviesRating().containsKey(action.getTitle())) {                            user.getMoviesRating().put(action.getTitle(), action.getGrade());                            ratingMovMessage = "success -> " + action.getTitle()                                                + " was rated with " + action.getGrade()                                                + " by " + user.getUsername();                        } else {                            ratingMovMessage = "error -> " + action.getTitle()                                                + " has been already rated";                        }                    } else {                        ratingMovMessage = "error -> " + action.getTitle()                                            + " is not seen";                    }                }            }        }        return ratingMovMessage;    }    /**     * A method that checks if a season of a serial has been rated by a user. If yes,     * an error message is returned, otherwise, it checks if that serial has been seen.     * If yes, the season receive the rating and a success message is returned, otherwise     * an error one is returned. If any of the seasons has not been rated since the action,     * the other seasons receive a 0 rating.     * @param users the list of users     * @param action the action     * @param serials the list of serials     * @return season rating message     */    public static String getRatingSeasMessage(final List<UserInputData> users,                                              final ActionInputData action,                                              final List<SerialInputData> serials) {        String ratingSeasMessage = null;        for (UserInputData user : users) {            if (user.getUsername().equals(action.getUsername())) {                if (user.getHistory().containsKey(action.getTitle())) {                    int seasonsNumber = 0;                    for (SerialInputData serial : serials) {                        if (serial.getTitle().equals(action.getTitle())) {                            seasonsNumber = serial.getNumberSeason();                            break;                        }                    }                    if (user.getSerialRating().containsKey(action.getTitle())) {                        for (Map.Entry<String, ArrayList<Double>> entry                                                    : user.getSerialRating().entrySet()) {                            if (entry.getKey().equals(action.getTitle())) {                                if (entry.getValue().get(action.getSeasonNumber() - 1) == 0) {                                    entry.getValue().set(action.getSeasonNumber() - 1,                                                                            action.getGrade());                                    ratingSeasMessage = "success -> " + action.getTitle()                                                        + " was rated with " + action.getGrade()                                                        + " by " + user.getUsername();                                    break;                                } else {                                    ratingSeasMessage = "error -> " + action.getTitle()                                                        + " has been already rated";                                }                            }                        }                    } else {                        ArrayList<Double> rating = new ArrayList<>();                        for (int i = 0; i < seasonsNumber; i++) {                            rating.add(0.0);                        }                        rating.set(action.getSeasonNumber() - 1, action.getGrade());                        user.getSerialRating().put(action.getTitle(), rating);                        ratingSeasMessage = "success -> " + action.getTitle() + " was rated with "                                            + action.getGrade()                                            + " by " + user.getUsername();                    }                } else {                    ratingSeasMessage = "error -> " + action.getTitle() + " is not seen";                }            }        }        return ratingSeasMessage;    }}