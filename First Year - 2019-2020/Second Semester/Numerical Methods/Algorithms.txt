Algoritmi MN

*** FACTORIZARI LU ***

function [x] = SST(A, b)
    n = length(b);
    x = zeros(n, 1);
    x(n) = b(n) / A(n, n);
    for i = n - 1 : -1 : 1
        x(i) = (b(i) - A(i, i + 1 : n) * x(i + 1 : n)) / A(i, i);
    endfor
endfunction

function [x] = SIT(A, b)
    n = length(b);
    x = zeros(n, 1);
    x(1) = b(1) / A(1, 1);
    for i = 2 : n
        x(i) = (b(i) - A(i, 1 : i - 1) * x(1 : i - 1)) / A(i, i);
    endfor
endfunction

function [L, U] = Crout(A)
    n = length(A);
    L = zeros(n);
    U = eye(n);
    for p = 1 : n
        for i = p : n
            L(i, p) = A (i, p) - L(i, 1 : p - 1) * U(1: p - 1, p);
        endfor
        for j = p + 1 : n
            U(p, j) = (A(p, j) - L(p , 1 : p - 1) * U(1 : p - 1, j)) / L(p, p);
        endfor
    endfor
endfunction

function [L, U] = Doolittle(A)
    n = length(A);
    L = eye(n);
    U = zeros(n);
    for p = 1 : n
        for i = p : n
            U(p, i) = A(p, i) - L(p, 1 : p - 1) * U(1 : p - 1, i);
        endfor
        for j = p + 1 : n
            L(j, p) = (A(j, p) - L(j, 1 : p -1) * U(1 : p - 1, p)) / U(p, p);
        endfor
    endfor
endfunction

//

% Verificare determinanti
function [x] = DETPOZ(A)
    a = length(A);
    x = 1;
    for i = 1 : a
        if (det(A(1 : i, 1 : i)) < 0)
            x = 0;
            return;
        endif
    endfor
endfunction

% Verificare simetrie
function [t] = SYM(A)
    a = length(A);
    t = 1;
    if (isequal(A, A') == 0)
        t = 0;
    endif
endfunction

function [L] = Cholesky(A)
    n = length(A);
    if (DETPOZ(A) == 1 && SYM(A) == 1)
        L = zeros(n);
        for i = 1 : n
            for j = 1 : i - 1
                s = 0;
                for k = 1 : j - 1
                    s = s + L(j, k) * L(i, k);
                endfor
                L(i, j) = (A(i, j) - s) / L(j, j);
            endfor
            s = 0;
            for k = 1 : i - 1
                s = s + L(i, k) * L(i, k);
            endfor
            L(i, i) = sqrt(A(i, i) - s);
        endfor
    else 
        L = NaN;
    endif
endfunction

//

*** FACTORIZARI QR ***

function [Q, R] = GrammSchmidt(A)
    [m,n] = size(A);
    Q = zeros(m);
    R = zeros(m, n);
    for i = 1 : n
    u = zeros(m, 1);
    s = zeros(m, 1);
        for k = 1 : i - 1
            s += dot(A(:, i), Q(:, k)) * Q(:, k);
        endfor
        u = A(:, i) - s;
        Q(:, i) = u / norm(u);
    endfor
    R = Q' * A;
endfunction

function [Q, R] = Givens(A)
    [m,n] = size(A);
    Q = eye(m);
    for j = 1 : n - 1
        for i = j + 1 : m
            G = eye(m);
            r = sqrt(A(i, j) ^ 2 + A(j, j) ^ 2);
            if r == 0
                return;
            endif
            c = A(j, j) / r;
            s = -A(i, j) / r;
            G(i, i) = G(j, j) = c;
            G(i, j) = s;
            G(j, i) = -s;
            Q = Q * G';
            A = G * A;
        endfor
    endfor
    R = A;
endfunction

function [Q, R] = Householder(A)
    [m,n] = size(A);
    Q = eye(m);
    if m <= n
        aux = m - 1;
    else 
        aux = n;
    endif
        for i = 1 : aux
            H = eye(m);
            x = zeros(m, 1);
            for j = i + 1 : m
                x(j) = A(j, i);
            endfor
            sigma = sign(A(i, i)) * norm(A(i : m, i));
            x(i) = sigma + A(i, i);
            H = H - 2 * (x * x') / (x' * x);
            Q = Q * H;
            A = H * A;
        endfor
    R = A;
endfunction

function [res] = custom_norm(x, p)
    n = length(x);
    if p == inf
        res = max(abs(x));
    else 
        s = 0;
        for i = 1 : n
            s = s + (abs(x(i))) ^ p;
        endfor
        res = s ^ (1/p);
    endif
endfunction

*** ELIMINARI GAUSSIENE ***

function [R, x] = G(A, b)
    n = length(b);
    R = A;
    for p = 1 : n - 1
        for i = p + 1 : n
            m = R(i, p) / R(p, p);
            R(i, :) = R(i, :) - m * R(p, :);
            b(i) = b(i) - m * b(p);
        endfor
    endfor 
    x = SST(R, b);
endfunction

function [R, x] = GPP(A, b)
    n = length(b);
    R = A;
    for p = 1 : n - 1
        maxim = 0;
        index = 0;
        for j = p : n
            if abs(R(j,p)) > maxim
                maxim = abs(R(j,p));
                index = j;
            endif
        endfor
        if p ~= index
        
            Aux = R(p, :);
            R(p, :) = R(index, :);
            R(index, :) = Aux;
            
            aux = b(p);
            b(p) = b(index);
            b(index) = aux;
            
        endif
        for i = p + 1 : n
            m = R(i, p) / R(p, p);
            R(i, :) = R(i, :) - m * R(p, :);
            b(i) = b(i) - m * b(p);
        endfor
    endfor
    x = SST(R, b);
endfunction

function [R, x] = GPPS(A, b)
    n = length(b);
    R = A;
    for p = 1 : n - 1
        maxim = 0;
        index = 0;
        s = max(abs(R(p : n, p : n)'));
        for j = p : n
            if (abs(R(j,p)) / s(j - p + 1)) > maxim
                maxim = abs(R(j,p)) / s(j - p + 1);
                index = j;
            endif
        endfor
        if p ~= index
        
            Aux = R(p, :);
            R(p, :) = R(index, :);
            R(index, :) = Aux;
            
            aux = b(p);
            b(p) = b(index);
            b(index) = aux;
            
        endif
        for i = p + 1 : n
            m = R(i, p) / R(p, p);
            R(i, :) = R(i, :) - m * R(p, :);
            b(i) = b(i) - m * b(p);
        endfor
    endfor
    x = SST(R, b);
endfunction

function [R, x] = GPT(A, b)
    n = length(b);
    R = A;
    vecpoz = [1:n]';
    for p = 1 : n - 1
    
        [maximcol, indici_lin] = max(abs(A(p : n, p : n)));
        [maximlinie, indice_col] = max(maximcol);
        lin = indici_lin(indice_col) + p - 1;
        col = indice_col + p -1;
        
        Aux = R(p, :);
        R(p, :) = R(lin, :);
        R(lin, :) = Aux;
        
        Aux = R(:, p);
        R(:, p) = R(:, col);
        R(:, col) = Aux;
        
        aux1 = b(p);
        b(p) = b(lin);
        b(lin) = aux1;
        
        aux2 = vecpoz(p);
        vecpoz(p) = vecpoz(col);
        vecpoz(col) = aux2;
        
        for i = p + 1 : n
            m = R(i, p) / R(p, p);
            R(i, :) = R(i, :) - m * R(p, :);
            b(i) = b(i) - m * b(p);
        endfor
    endfor
    aux3 = SST(R, b);
    for i = 1 : n;
        for j = 1 : n;
            if i == vecpoz(j);
                x(i) = aux3(j);
            endif
        endfor
    endfor
    x = x';
endfunction

function [invA] = GaussJordan(A)
    n = length(A);
    I = eye(n);
    if det(A) == 0
        invA = NaN;
        return;
    endif
    B = [A, I];
    for p = 1 : n - 1
       for i = p + 1 : n
            m = -B(i, p) / B(p, p);
            B(i, :) = B(i, :) + m * B(p, :);
        endfor
    endfor
    for p = 1 : n
        m = 1 / B(p, p);
        B(p, :) = m * B(p, :);
    endfor
    for p = n : -1 : 2
        m = -B(p-1, p);
        B(p - 1, :) = B(p - 1, :) + m * B(p, :);
    endfor
    
    invA = B(:, n + 1 : 2 * n);
endfunction

//

*** METODE ITERATIVE ***

function [x, err, steps] = matrix_Jacobi(A, b, x0, tol, max_steps)
    N = diag(diag(A));
    P = N - A;
    inv_N = inv(N);
    G = inv_N * P;
    c = inv_N * b;
    prev_x = x0;
    steps = 0;
    while 1 
        x = G * prev_x + c;
        err = norm(x - prev_x);
        if (++steps == max_steps) || (err < tol)
            return;
        endif
        prev_x = x;
    endwhile
endfunction

function [x, err, steps] = Jacobi(A, b, x0, tol, max_steps)
    prev_x = x0;
    steps = 0;
    n = length(x0);
    x = prev_x;
    while 1
        for i = 1 : n
            x(i) = (b(i) - A(i, :) * prev_x + A(i, i) * prev_x(i)) / A(i, i);
        endfor
        err = norm(x - prev_x);
        if (++steps == max_steps) || (err < tol)
            return;
        endif
        prev_x = x;
    endwhile
endfunction

//

function [x, err, steps] = matrix_GaussSeidel(A, b, x0, tol, max_steps)
    N = tril(A);
    P = N - A;
    prev_x = x0;
    inv_N = inv(N);
    G = inv_N * P;
    c = inv_N * b;
    steps = 0;
    while 1
        x = G * prev_x + c;
        err = norm(x - prev_x);
        if (++steps == max_steps) || (err < tol)
            return;
        endif
        prev_x = x;
    endwhile
endfunction

function [x, err, steps] = GaussSeidel(A, b, x0, tol, max_steps)
    prev_x = x0;
    steps = 0;
    n = length(x0);
    x = prev_x;
    while 1
        for i = 1 : n
            x(i) = (b(i) - A(i, 1 : i - 1) * x(1 : i - 1) - A(i, i + 1 : n) * prev_x(i + 1 : n)) / A(i, i);
        endfor
        err = norm(x - prev_x);
        if (++steps == max_steps) || (err < tol)
            return;
        endif
        prev_x = x;
    endwhile  
endfunction

//

function [x, err, steps] = matrix_SOR(A, b, x0, tol, max_steps, w)
    L = tril(A,-1);
    U = triu(A, 1);
    D = diag(diag(A));
    N = D + w * L;
    P = (1 - w) * D - w * U;
    inv_N = inv(N);
    G = inv_N * P;
    c = w * inv_N * b;
    prev_x = x0;
    steps = 0;
    while 1
        x = G * prev_x + c;
        err = norm(x - prev_x);
        if (++steps == max_steps) || (err < tol)
            return;
        endif
        prev_x = x;
    endwhile
endfunction

function [x, err, steps] = SOR(A, b, x0, tol, max_steps, w)
    prev_x = x0;
    steps = 0;
    n = length(x0);
    x = prev_x;
    while 1
        for i = 1 : n
            x(i) = (1 - w) * prev_x(i) + w * (b(i) - A(i, 1 : i - 1) * x(1 : i - 1) - A(i, i + 1 : n) * ...
                                                                     prev_x(i + 1 : n)) / A(i, i);
        endfor
        err = norm(x - prev_x);
        if (++steps == max_steps) || (err < tol)
            return;
        endif
        prev_x = x;
    endwhile
endfunction

//

*** SOLUTII ALE ECUATIILOR NELINIARE ***

function [r, err, steps] = bisection(f, a, b, tol, max_steps)
    steps = 0;
    while 1
        r = (a + b) / 2;
        if feval(f, a) * feval(f, r) < 0
            b = r;
        else
            a = r;
        endif
        err = b - a;
        if (++steps == max_steps) || (err < tol)
            return;
        endif
    endwhile
endfunction

function [r, err, steps] = newton_raphson(f, df, x0, tol, max_steps)
    steps = 0;
    prev_x = x0;
    while 1
        r = prev_x - feval(f, prev_x) / feval(df, prev_x);
        err = abs(r - prev_x);
        if (++steps == max_steps) || (err < tol)
            return;
        endif
        prev_x = r;
    endwhile
endfunction

function [r, err, steps] = secant(f, x0, x1, tol, max_steps)
    steps = 0;
    prev_x1 = x0;
    prev_x2 = x1;
    while 1
        r = prev_x2 - ((prev_x1 - prev_x2) * feval(f, prev_x2)) / (feval(f, prev_x1) - feval(f, prev_x2));
        err = abs(r - prev_x2);
        if (++steps == max_steps) || (err < tol)
            return;
        endif
        prev_x1 = prev_x2;
        prev_x2 = r;
    endwhile
endfunction

function [res] = custom_norm(x, p)
    n = length(x);
    if p == inf
        res = max(abs(x));
    else 
        s = 0;
        for i = 1 : n
            s = s + (abs(x(i))) ^ p;
        endfor
        res = s ^ (1/p);
    endif
endfunction

function [r, err, steps] = Newton(F_handles, x0, tol, max_steps, h)
    steps = 0;
    prev_x = x0;
    m = length(F_handles);
    n = length(x0);
    while 1
        Jac = [];
        for i = 1 : m;
            for j = 1 : n;
            aux1 = prev_x;
            aux2 = prev_x;
            aux1(j) = aux1(j) + h;
            aux2(j) = aux2(j) - h;
                Jac(i, j) = 1/(2*h) * (feval(F_handles{i}, aux1) - feval(F_handles{i}, aux2));
            endfor
        endfor
        for i = 1 : m
            df(i) = feval(F_handles{i}, prev_x);
        endfor
        dx = Jac \ (-df');
        r = prev_x + dx;
        err = norm(r - prev_x);
        if(++steps == max_steps) || (err < tol)
            return;
        endif
        prev_x = r;
    endwhile
endfunction

*** AFLAREA VALORILOR SI VECTORILOR PROPRII ***

function [lambda, x, err, steps] = power_method(A, x0, tol, max_steps)
    steps = 0;
    prev_x = x0;
    while 1
        x = A * prev_x;
        x = x / norm(x);
        lambda = x' * A * x;
        err = norm(x - prev_x);
        if (++steps == max_steps) || (err < tol)
            return;
        endif
        prev_x = x;
    endwhile
endfunction

function [lambda, x, err, steps] = i_power_method(A, x0, tol, max_steps)
    steps = 0;
    prev_x = x0;
    while 1
        x = A \ prev_x;
        x = x / norm(x);
        lambda = x' * A * x;
        err = norm(x - prev_x);
        if (++steps == max_steps) || (err < tol)
            return;
        endif
        prev_x = x;
    endwhile
endfunction

function [lambda, x, err, steps] = s_i_power_method(A, x0, tol, max_steps, alfa)
    steps = 0;
    prev_x = x0;
    I = eye(length(A));
    while 1
        x = (A - alfa * I) \ prev_x;
        x = x / norm(x);
        lambda = x' * A * x;
        err = norm(x - prev_x);
        if (++steps == max_steps) || (err < tol)
            return;
        endif
        prev_x = x;
    endwhile
endfunction

function [X, l, total_steps] = orthogonal_power_method(A, tol, max_steps)
    X = [];
    l = [];
    n = length(A);
    total_steps = 0;
    for i = 1 : n
        prev_x = rand(n, 1);
        steps = 0;
        while 1
            for j = 1 : size(X, 2);
                prev_x = prev_x - X(:, j)' * prev_x * X(:, j);
            endfor
            x = A * prev_x;
            x = x / norm(x);
            lambda = x' * A * x;
            err = norm(x - prev_x);
            if (++steps == max_steps) || (err < tol);
                l = [l, lambda];
                X = [X, x];
                break;
            endif
            prev_x = x;
        endwhile
        total_steps += steps;
    endfor
endfunction

function [X, l, steps] = orthogonal_iteration(A, tol, max_steps)
    X = [];
    l = [];
    n = length(A);
    steps = 0;
    last_U = rand(n, n);
    while 1
        [Q, R] = qr(last_U);
        U = A * Q;
        err = norm(U - last_U);
        if (++steps == max_steps) || (err < tol)
            [Q, R] = qr(U);
            X = Q;
            l = diag(R)';
            return;
        endif
        last_U = U;
    endwhile
endfunction

function [X, l, total_steps] = deflation(A, tol, max_steps)
    X = [];
    l = [];
    A0 = A;
    n = length(A);
    total_steps = 0;
    for i = 1 : n
        [lmb1, xb, err, steps] = power_method(A, rand(length(A), 1), tol, max_steps);
        total_steps += steps;
        [lmb, x, err, steps] = s_i_power_method(A0, rand(n, 1), tol, max_steps, lmb1 + rand() * 1e-3);
        total_steps += steps;
        X = [X, x];
        l = [l, lmb];
        H = eye(length(A));
        v = xb;
        sigma = sign(xb(1)) * norm(xb);
        v(1) = v(1) + sigma;
        H = H - 2 * (v * v') / (v' * v);
        A = H' * A * H;
        A = A(2:end, 2:end);
    endfor
endfunction

function [R_] = hessenberg(A)
    n = length(A);
    R_ = A;
    for i = 1 : n - 2
        H = eye(n);
        x = zeros(n, 1);
        x(i + 2 : n, 1) = R_(i + 2 : n, i);
        sigma = sign(R_(i + 1, i)) * norm(R_(i + 1 : n, i));
        x(i + 1) = sigma + R_(i + 1, i);
        H = H - 2 * (x * x') / (x' * x);
        R_ = H * R_ * H';
    endfor
endfunction

function [X, l, steps] = qr_algorithm(A, max_steps)
    steps = 0;
    lastA = A;
    n = length(A);
    X = eye(n);
    while 1
        [Q, R] = qr(lastA);
        X = X * Q;
        A = R * Q;
        if(diag(A) == diag(lastA)) || (++steps == max_steps)
            l = diag(A)';
            return;
        endif
        lastA = A;
    endwhile
endfunction

*** INTERPOLARI ***

function [P] = vandermonde(x, y)
    n = length(x);
    A = x' .^ ((1 : n) - 1);
    P = (A \ y')(n : -1 : 1);
endfunction

function [yy] = lagrange(x, y, xx)
    n = length(x);
    L = ones(n, size(xx, 2));
    for i = 1 : n
        for j = 1 : n
            if i ~= j
                L(i, :) = L(i, :) .* ((xx - x(j))/(x(i) - x(j)));
            endif
        endfor
    endfor
    yy = y * L;
endfunction

function [P] = newton(x, y)
    n = length(x);
    P = y;
    for i = 2 : n
        for j = 1 : i - 1
            P(i) = (P(j) - P(i)) / (x(j) - x(i));
        endfor
    endfor
    P = P(end : -1 : 1);
endfunction

function [yy] = neville(x, y, xx)
    n = length(x);
    q = zeros(n);
    for k = 1 : length(xx);
        q(:, 1) = y(:);
        for i = 1 : n - 1
                for j = 1 : i
                   q(i + 1, j + 1) = ((xx(k) - x(i - j + 1)) * q(i + 1, j) - (xx(k) - x(i + 1)) * q(i, j)) / (x(i + 1) - x(i - j + 1));
                endfor
        endfor
        yy(k) = q(n,n);
    endfor
endfunction

function [S] = spline_c2_natural(x, y)
    n = length(x) - 1;
    h = diff(x);
    A = zeros(4 * n);
    b = zeros(4 * n, 1);
    for i = 1 : n
        A(i, 4 *(i - 1) + 1) = 1;
        b(i) = y(i);
    endfor
    A(n + 1, 4 * (n - 1) + 1 : end) = h(n) .^ [0 : 3];
    b(n + 1) = y(n + 1);
    j = n + 2;
    for i = 0 : n - 2
        A(j, 4 * i + 1 : 4 * (i + 1)) = h(i + 1) .^ [0 : 3];
        A(j, 4 * (i + 1) + 1) = -1;
        A(j + 1, 4 * i + 2 : 4 * (i + 1)) = h(i + 1) .^ [0 : 2] .* [1, 2, 3];
        A(j + 1, 4 * (i + 1) + 2) = -1;
        A(j + 2, 4 * i + 3 : 4 * (i + 1)) = h(i + 1) .^ [0 : 1] .* [2, 6];
        A(j + 2, 4 * (i + 1) + 3) = -2;
        j += 3;
    endfor
    A(4 * n - 1, 3) = 1;
    A(4 * n, 4 * n - 1) = 2 * h(n) .^ 0;
    A(4 * n, 4 * n) = 6 * h(n) .^ 1;
    val = A \ b;
    S = reshape(val, 4, n)';
endfunction

*** DFT SI FFT ***

function [F] = create_fourier_matrix(N)
    for k = 1 : N
        for j = 1 : N
            F(k, j) = cos((2 * pi * (k - 1) * (j - 1)) / N) + i * sin((2 * pi * (k - 1) * (j - 1)) / N);
        endfor
    endfor
endfunction

function [F] = create_fft_matrix(N)
    if N == 1
        F = [1];
    else
        w = cos(2 * pi / N) + i * sin(2 * pi / N);
        M = N / 2;
        DM = diag(w .^ [0 : M - 1]);
        for i = 1 : M
            Mat3(i, 2 * i - 1) = 1;
        endfor
        for i = 1 : M
            Mat3(N - M + i, 2 * i) = 1;
        endfor
        IM = eye(M);
        Mat1 = [IM, DM; IM, -DM];
        FM = create_fft_matrix(M);
        Mat2 = blkdiag(FM, FM);
        F = Mat1 * Mat2 * Mat3;
    endif
endfunction

*** INTEGRARE NUMERICA ***

function [T] = trapezoidal(f, a, b, n)
    h = (b - a) / n;
    x = a + h : h : b - h;
    T = h * ((feval(f, a) + feval(f, b)) / 2 + sum(feval(f, x)));
endfunction

function [S] = simpson(f, a, b, n)
    h = (b - a) / (2 * n);
    x = a + h : h : b - h;
    S = (h / 3) * (feval(f, a) + feval(f, b) + 4 * sum(feval(f, x(1 : 2 : 2 * n))) + 2 * sum(feval(f, x(2 : 2 : 2 * n -1))));
endfunction

function [R] = romberg(f, a, b, n)
    H = b - a;
    pr_R = zeros(n + 1, 1);
    for i = 1 : n + 1
        pr_R(i) = trapezoidal(f, a, b, 2 ^ (i - 1));
    endfor
    for i = 1 : n
        for m = 2 : length(pr_R)
            R(m - 1, 1) = pr_R(m) + (pr_R(m) - pr_R(m - 1)) / (4 ^ i - 1);
        endfor
        pr_R = R;
    endfor
    R = R(1);
endfunction

*** DERIVARE NUMERICA ***

function [values] = taylor_1(df, t0, x0, h, N)
    values = zeros(N + 1, 1);
    values(1) = x0;
    for k = 2 : N + 1
        tk = t0 + h * (k - 2);
        xk = values(k - 1);
        values(k) = xk + h * df(tk, xk);
    endfor
    values = values';
endfunction

function [values] = taylor_2(df, dfdt, dfdx, t0, x0, h, N)
    values = zeros(N + 1, 1);
    values(1) = x0;
    for k = 2 : N + 1
        tk = t0 + h * (k - 2);
        xk = values(k - 1);
        values(k) = xk + h * df(tk, xk) + ((h ^ 2) / 2) * (dfdt(tk) + dfdx(xk) * df(tk, xk));
    endfor
    values = values';
endfunction

function [values] = rk2_heun(df, t0, x0, h, N)
    values = zeros(N + 1, 1);
    values(1) = x0;
    for k = 2 : N + 1
        tk = t0 + h * (k - 2);
        xk = values(k - 1);
        k1 = h * df(tk, xk);
        k2 = h * df(tk + h, xk + k1);
        values(k) = xk + (k1 + k2) / 2;
    endfor
    values = values';
endfunction

function [values] = rk4_classic(df, t0, x0, h, N)
    values = zeros(N + 1, 1);
    values(1) = x0;
    for k = 2 : N + 1
        tk = t0 + h * (k - 2);
        xk = values(k - 1);
        k1 = h * df(tk, xk);
        k2 = h * df(tk + h / 2, xk + k1 / 2);
        k3 = h * df(tk + h / 2, xk + k2 / 2);
        k4 = h * df(tk + h, xk + k3);
        values(k) = xk + (k1 + 2 * k2 + 2 * k3 + k4) / 6;
    endfor
    values = values';
endfunction

function [values] = ab2_explicit(df, t0, x0, h, N, initial_approximator)
    values = zeros(N + 1, 1);
    values(1 : 2) = initial_approximator(df, t0, x0, h, 1);
    for k = 3 : N + 1
        tk1 = t0 + h * (k - 3);
        tk0 = t0 + h * (k - 2);
        xk1 = values(k - 2);
        xk0 = values(k - 1);
        values(k) = xk0 + h / 2 * (3 * df(tk0, xk0) - df(tk1, xk1));
    endfor
    values = values';
endfunction

function [values] = abm_multistep(df, t0, x0, h, N, initial_approximator)
    values = zeros(N + 1, 1);
    values(1 : 2) = initial_approximator(df, t0, x0, h, 1);
    for k = 3 : N + 1
        tk0 = t0 + h * (k - 3);
        tk1 = t0 + h * (k - 2);
        xk0 = values(k - 2);
        xk1 = values(k - 1);
        xkpred = xk1 + h / 2 * (3 * df(tk1, xk1) - df(tk0, xk0));
        tk2 = t0 + h *(k - 1);
        values(k) = xk1 + h / 2 * (df(tk2, xkpred) + df(tk1, xk1));
    endfor
    values = values';
endfunction

