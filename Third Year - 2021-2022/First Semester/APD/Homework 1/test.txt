#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <pthread.h>
#include <math.h>
#include "genetic_algorithm.h"

#define min(a,b) a<b?a:b

struct my_arg {
	int thread_id;
	sack_object *objects;
	int object_count;
	int sack_capacity;
	int generations_count;
	individual **current_generation;
	individual **next_generation;
	individual **some_generation;
	pthread_barrier_t *barrier;
	int P;
	int nr;
};

int read_input(sack_object **objects, int *object_count, int *sack_capacity, int *generations_count, int *P, int *nr,  int argc, char *argv[]) {
	FILE *fp;

	if (argc < 4) {
		fprintf(stderr, "Usage:\n\t./tema1 in_file generations_count P\n");
		return 0;
	}

	fp = fopen(argv[1], "r");
	if (fp == NULL) {
		return 0;
	}

	if (fscanf(fp, "%d %d", object_count, sack_capacity) < 2) {
		fclose(fp);
		return 0;
	}

	if (ceil(log2(*object_count)) == floor(log2(*object_count))) {
		*nr = *object_count;
	} else {
		*nr = pow(2, log2(*object_count) + 1);
	}

	if (*object_count % 10) {
		fclose(fp);
		return 0;
	}

	sack_object *tmp_objects = (sack_object *) calloc(*object_count, sizeof(sack_object));

	for (int i = 0; i < *object_count; ++i) {
		if (fscanf(fp, "%d %d", &tmp_objects[i].profit, &tmp_objects[i].weight) < 2) {
			free(objects);
			fclose(fp);
			return 0;
		}
	}

	fclose(fp);

	*generations_count = (int) strtol(argv[2], NULL, 10);
	
	if (*generations_count == 0) {
		free(tmp_objects);

		return 0;
	}

	*objects = tmp_objects;

	*P = (int) strtol(argv[3], NULL, 10);

	return 1;
}

void print_objects(const sack_object *objects, int object_count) {
	for (int i = 0; i < object_count; ++i) {
		printf("%d %d\n", objects[i].weight, objects[i].profit);
	}
}

void print_generation(const individual *generation, int limit) {
	for (int i = 0; i < limit; ++i) {
		for (int j = 0; j < generation[i].chromosome_length; ++j) {
			printf("%d ", generation[i].chromosomes[j]);
		}

		printf("\n%d - %d\n", i, generation[i].fitness);
	}
}

void print_best_fitness(const individual *generation) {
	printf("%d\n", generation[0].fitness);
}

void compute_fitness_function(const sack_object *objects, individual *generation, int object_count, int sack_capacity)
{
	int weight;
	int profit;

	for (int i = 0; i < object_count; ++i) {
		weight = 0;
		profit = 0;

		for (int j = 0; j < generation[i].chromosome_length; ++j) {
			if (generation[i].chromosomes[j]) {
				weight += objects[j].weight;
				profit += objects[j].profit;
			}
		}

		generation[i].fitness = (weight <= sack_capacity) ? profit : 0;
	}
}

int cmpfunc(const void *a, const void *b) {
	int i;
	individual *first = (individual *) a;
	individual *second = (individual *) b;

	int res = second->fitness - first->fitness; // decreasing by fitness
	if (res == 0) {
		int first_count = 0, second_count = 0;

		for (i = 0; i < first->chromosome_length && i < second->chromosome_length; ++i) {
			first_count += first->chromosomes[i];
			second_count += second->chromosomes[i];
		}

		res = first_count - second_count; // increasing by number of objects in the sack
		if (res == 0) {
			return second->index - first->index;
		}
	}

	return res;
}

void mutate_bit_string_1(const individual *ind, int generation_index) {
	int i, mutation_size;
	int step = 1 + generation_index % (ind->chromosome_length - 2);

	if (ind->index % 2 == 0) {
		// for even-indexed individuals, mutate the first 40% chromosomes by a given step
		mutation_size = ind->chromosome_length * 4 / 10;
		for (i = 0; i < mutation_size; i += step) {
			ind->chromosomes[i] = 1 - ind->chromosomes[i];
		}
	} else {
		// for even-indexed individuals, mutate the last 80% chromosomes by a given step
		mutation_size = ind->chromosome_length * 8 / 10;
		for (i = ind->chromosome_length - mutation_size; i < ind->chromosome_length; i += step) {
			ind->chromosomes[i] = 1 - ind->chromosomes[i];
		}
	}
}

void mutate_bit_string_2(const individual *ind, int generation_index) {
	int step = 1 + generation_index % (ind->chromosome_length - 2);

	// mutate all chromosomes by a given step
	for (int i = 0; i < ind->chromosome_length; i += step) {
		ind->chromosomes[i] = 1 - ind->chromosomes[i];
	}
}

void crossover(individual *parent1, individual *child1, int generation_index) {
	individual *parent2 = parent1 + 1;
	individual *child2 = child1 + 1;
	int count = 1 + generation_index % parent1->chromosome_length;

	memcpy(child1->chromosomes, parent1->chromosomes, count * sizeof(int));
	memcpy(child1->chromosomes + count, parent2->chromosomes + count, (parent1->chromosome_length - count) * sizeof(int));

	memcpy(child2->chromosomes, parent2->chromosomes, count * sizeof(int));
	memcpy(child2->chromosomes + count, parent1->chromosomes + count, (parent1->chromosome_length - count) * sizeof(int));
}

void copy_individual(const individual *from, const individual *to) {
	memcpy(to->chromosomes, from->chromosomes, from->chromosome_length * sizeof(int));
}

void free_generation(individual *generation){
	int i;

	for (i = 0; i < generation->chromosome_length; ++i) {
		free(generation[i].chromosomes);
		generation[i].chromosomes = NULL;
		generation[i].fitness = 0;
	}
}

void *run_genetic_algorithm(void *arg)
{
	struct my_arg *data = (struct my_arg*) arg;
	
	int count, cursor;
	individual **current_generation = data->current_generation;
	individual **next_generation = data->next_generation;
	// individual **some_generation = data->some_generation;
	individual *tmp = NULL;

	int start = data->thread_id * (double) data->object_count / data->P;
	int end = min((data->thread_id + 1) * (double) data->object_count / data->P, data->object_count);

	// set initial generation (composed of object_count individuals with a single item in the sack)
	for (int i = start; i < end; ++i) {
		(*current_generation)[i].fitness = 0;
		(*current_generation)[i].chromosomes = (int*) calloc(data->object_count, sizeof(int));
		(*current_generation)[i].chromosomes[i] = 1;
		(*current_generation)[i].index = i;
		(*current_generation)[i].chromosome_length = data->object_count;

		(*next_generation)[i].fitness = 0;
		(*next_generation)[i].chromosomes = (int*) calloc(data->object_count, sizeof(int));
		(*next_generation)[i].index = i;
		(*next_generation)[i].chromosome_length = data->object_count;
	}
	pthread_barrier_wait(data->barrier);

	if (data->thread_id == 0) {

		// iterate for each generation
		for (int k = 0; k < data->generations_count; ++k) {
			cursor = 0;

			// compute fitness and sort by it
			compute_fitness_function(data->objects, (*current_generation), data->object_count, data->sack_capacity);
			qsort((*current_generation), data->object_count, sizeof(individual), cmpfunc);

			// keep first 30% children (elite children selection)
			count = data->object_count * 3 / 10;
			for (int i = 0; i < count; ++i) {
				copy_individual((*current_generation) + i, (*next_generation) + i);
			}
			cursor = count;

			// mutate first 20% children with the first version of bit string mutation
			count = data->object_count * 2 / 10;
			for (int i = 0; i < count; ++i) {
				copy_individual((*current_generation) + i, (*next_generation) + cursor + i);
				mutate_bit_string_1((*next_generation) + cursor + i, k);
			}
			cursor += count;

			// mutate next 20% children with the second version of bit string mutation
			count = data->object_count * 2 / 10;
			for (int i = 0; i < count; ++i) {
				copy_individual((*current_generation) + i + count, (*next_generation) + cursor + i);
				mutate_bit_string_2((*next_generation) + cursor + i, k);
			}
			cursor += count;

			// crossover first 30% parents with one-point crossover
			// (if there is an odd number of parents, the last one is kept as such)
			count = data->object_count * 3 / 10;

			if (count % 2 == 1) {
				copy_individual((*current_generation) + data->object_count - 1, (*next_generation) + cursor + count - 1);
				count--;
			}

			for (int i = 0; i < count; i += 2) {
				crossover((*current_generation) + i, (*next_generation) + cursor + i, k);
			}

			// switch to new generation
			tmp = (*current_generation);
			(*current_generation) = (*next_generation);
			(*next_generation) = tmp;

			for (int i = 0; i < data->object_count; ++i) {
				(*current_generation)[i].index = i;
			}

			if (k % 5 == 0) {
				print_best_fitness((*current_generation));
			}
		}
		

		compute_fitness_function(data->objects, (*current_generation), data->object_count, data->sack_capacity);
		qsort((*current_generation), data->object_count, sizeof(individual), cmpfunc);
		print_best_fitness((*current_generation));

		// free resources for old generation
		free_generation((*current_generation));
		free_generation((*next_generation));

		// free resources
		free((*current_generation));
		free((*next_generation));
	}
	pthread_barrier_wait(data->barrier);
	return NULL;
}

int main(int argc, char *argv[]) {
	int r;
	void *status;

	// the threads
	pthread_t *threads;

	// our structure
	struct my_arg *arguments;

	//the barrier
	pthread_barrier_t barrier;

	// array with all the objects that can be placed in the sack
	sack_object *objects = NULL;

	// number of objects
	int object_count = 0;

	// maximum weight that can be carried in the sack
	int sack_capacity = 0;

	// number of generations
	int generations_count = 0;

	// number of threads
	int P = 0;

	// ceva de calc
	int nr = 0;

	if (!read_input(&objects, &object_count, &sack_capacity, &generations_count, &P, &nr, argc, argv)) {
		return 0;
	}

	arguments = (struct my_arg*) malloc(P * sizeof(struct my_arg));
	threads = (pthread_t*) malloc(P * sizeof(pthread_t));
	individual *current_generation = (individual*) calloc(nr, sizeof(individual));
	individual *next_generation = (individual*) calloc(nr, sizeof(individual));
	// individual *some_generation = (individual*) calloc(nr, sizeof(individual));
	

	pthread_barrier_init(&barrier, NULL, P);

	for (int i = 0; i < P; i++) {
		arguments[i].thread_id = i;
		arguments[i].objects = objects;
		arguments[i].object_count = object_count;
		arguments[i].sack_capacity = sack_capacity;
		arguments[i].generations_count = generations_count;
		arguments[i].current_generation = &current_generation;
		// arguments[i].some_generation = &some_generation;
		arguments[i].next_generation = &next_generation;
		arguments[i].barrier = &barrier;
		arguments[i].P = P;
		arguments[i].nr = nr;

		r = pthread_create(&threads[i], NULL, run_genetic_algorithm, &arguments[i]);
		if (r) {
			printf("Eroare la crearea thread-ului %d\n", i);
			exit(-1);
		}
	}

	for (int i = 0; i < P; i++) {
		r = pthread_join(threads[i], &status);
		if (r) {
			printf("Eroare la asteptarea thread-ului %d\n", i);
			exit(-1);
		}
	}

	free(objects);
	free(arguments);
	pthread_barrier_destroy(&barrier);
	return 0;
}